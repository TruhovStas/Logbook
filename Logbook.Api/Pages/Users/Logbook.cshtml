@page "/Logbook"
@{
    ViewData["Title"] = "Журнал растворов";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

<style>
    body {
        color: #333;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .container-box {
        background-color: #ffffff;
        color: #333;
        border-radius: 12px;
        padding: 2rem;
        box-shadow: 0 8px 30px rgba(0, 0, 0, 0.3);
        margin-top: 3rem;
    }

    .btn-primary {
        background-color: #5a67d8;
        border-color: #5a67d8;
    }

    .btn-primary:hover {
        background-color: #434190;
        border-color: #434190;
    }

    .btn-danger {
        background-color: #e74c3c;
    }

    .logout-button {
        position: fixed;
        top: 1rem;
        right: 2rem;
    }

    table th, table td {
        vertical-align: middle;
        font-size: 0.9rem;
    }

    .table-container {
        width: 100%;
        overflow-x: auto;
    }

    .form-container {
        margin-bottom: 3rem;
    }

    .logout-button {
        position: fixed;
        top: 1rem;
        right: 1rem;
        z-index: 1000;
    }

    .btn-outline-dark {
        background-color: ghostwhite;
        border-color: #5a67d8;
        color: #5a67d8;
    }

    .btn-outline-dark:hover {
        background-color: #5a67d8;
        color: white;
        border-color: #434190;
    }

    .wrap-column {
        white-space: pre-wrap;
        word-break: break-word;
    }

    .italic-cell {
        font-style: italic;
    }
</style>


<div id="auth-button" class="logout-button"></div>


<script>
    async function logout() {
        const token = localStorage.getItem("jwtToken");

        if (token) {
            await fetch("/api/auth/logout", {
                method: "POST",
                headers: {
                    "Authorization": `Bearer ${token}`
                }
            });
        }

        localStorage.removeItem("jwtToken");
        window.location.href = "/Login";
    }
</script>

<ul class="nav nav-tabs justify-content-center" id="logbookTabs" role="tablist">
    <li class="nav-item" role="presentation">
        <button class="nav-link active" id="solutions-tab" data-bs-toggle="tab" data-bs-target="#solutions" type="button" role="tab">Растворы</button>
    </li>
    <li class="nav-item" role="presentation">
        <button class="nav-link" id="substances-tab" data-bs-toggle="tab" data-bs-target="#substances" type="button" role="tab">Установочные вещества</button>
    </li>
</ul>

<div class="tab-content container-box">
    <div class="tab-pane fade show active" id="solutions" role="tabpanel">
        <h2 class="text-center mb-4">Журнал титрованных растворов</h2>
        <div class="container container-box form-container">
            <div id="form-container">
            <h4 class="mt-4">Добавить новый раствор</h4>
                <form id="solution-form">
                    <div class="row mb-2">
                        <div class="col"><input name="PreparationDate" class="form-control" type="date" required></div>
                        <div class="col"><input name="ValidationDate" class="form-control" type="date" required></div>
                        <div class="col"><input name="SolutionVolume" class="form-control" type="number" step="0.01" placeholder="Объем" required></div>
                        <div class="col"><input name="StorageConditions" class="form-control" placeholder="Условия хранения" required></div>
                        <div class="col"><input name="StoragePeriod" class="form-control" placeholder="Срок хранения" required></div>
                    </div>
                    <div class="row mb-2">
                        <div class="col"><input name="SolutionTemperature" class="form-control" step="0.1" placeholder="Темп." required></div>
                        <div class="col" colspan="3">
                            <select name="SelectedSubstanceId" class="form-select" id="substance-dropdown" required>
                                <option value="">Выберите вещество...</option>
                                <!-- JS заполнит -->
                            </select>
                        </div>

                    </div>
                    <div class="mb-2">
                        <input name="SubstanceMasses" class="form-control mb-2" placeholder="Навески (через запятую)" required>
                        <input name="SolutionVolumes" class="form-control" placeholder="Объемы (через запятую)" required>
                    </div>
                    <button type="submit" class="btn btn-primary">Добавить на контроль</button>
                </form>
            </div>
        </div>

        <h3 class="text-center mt-5 mb-4">Журнал контроля</h3>

        <div class="container table-container">
            <table class="table table-bordered table-striped">
                <thead class="table-light">
                    <tr>
                        <th>Дата приготовления титрованного раствора</th>
                        <th>Дата проверки коэффициента поправки титрованного раствора</th>
                        <th>Объем приготовленного раствора, см3</th>
                        <th>Условия хранения титрованного раствора</th>
                        <th>Срок хранения титрованного раствора</th>
                        <th style="min-width: 140px;">Температура в момент измерения</th>
                        <th>Установочное вещество</th>
                        <th style="min-width: 120px;">Навеска, m, г</th>
                        <th>Объем, V, см3</th>
                        <th>Коэффициент поправки, К</th>
                        <th>Коэффициент поправки, Кср</th>
                        <th>ФИО</th>
                        <th id="delete-column">Удалить</th>
                    </tr>
                </thead>
                <tbody id="solution-table-body">
                    <!-- JS заполняет -->
                </tbody>
            </table>
        </div>
        <nav class="d-flex justify-content-center align-items-center mt-3">
            <ul id="pagination" class="pagination mb-0"></ul>
            <div class="ms-3 d-flex align-items-center">
                <input id="goto-page" type="number" class="form-control" placeholder="Стр." style="width: 80px;">
                <button class="btn btn-primary ms-2" onclick="goToPage()">Перейти</button>
            </div>
        </nav>

        <div class="text-center mt-4">
            <button class="btn btn-outline-dark" onclick="printCurrentPage()">Распечатать отчёт</button>
        </div>
    </div>

    <div class="tab-pane fade" id="substances" role="tabpanel">
        <h2 class="text-center mb-4">Журнал установочных веществ</h2>
        <div id="substance-form-container">
        <form id="substance-form">
            <div class="row mb-2">
                <div class="col"><input name="Formula" class="form-control" placeholder="Формула вещества" required></div>
                <div class="col"><input name="Method" class="form-control" placeholder="Метод (опционально)"></div>
                <div class="col"><input name="MolarMass" class="form-control" type="number" step="0.01" placeholder="Молярная масса" required></div>
                <div class="col"><input name="Concentration" class="form-control" type="number" step="0.01" placeholder="Концентрация" required></div>
            </div>
            <button type="submit" class="btn btn-primary">Добавить вещество</button>
        </form>
        </div>
        <hr/>

        <table class="table table-bordered table-striped mt-4">
            <thead>
                <tr>
                    <th>Формула</th>
                    <th>Метод</th>
                    <th>Молярная масса</th>
                    <th>Концентрация</th>
                    <th id="substance-delete-column">Удалить</th>
                </tr>
            </thead>
            <tbody id="substance-table-body">
                <!-- JS заполнит -->
            </tbody>
        </table>
    </div>
</div>

<script>
    const isGuest = new URLSearchParams(window.location.search).get("guest") === "true";
    const token = localStorage.getItem("jwtToken");
    if (!token && !isGuest) {
        window.location.href = "/Login";
    }
    let currentPage = 1;
    let totalPages = 1;
    const pageSize = 10;
    let currentSortColumn = "PreparationDate";
    let currentSortDirection = "asc";
    const authBtnContainer = document.getElementById("auth-button");
    authBtnContainer.innerHTML = isGuest
        ? `<button class="btn btn-outline-dark" onclick="window.location.href='/Login'">Войти</button>`
        : `<button class="btn btn-outline-dark" onclick="logout()">Выйти</button>`;
    if (isGuest) {
        document.getElementById("form-container").style.display = "none";
        document.getElementById("delete-column")?.remove();
        document.getElementById("substance-form-container").style.display = "none";
        document.getElementById("substance-delete-column")?.remove();
    }

    function goToPage() {
        const input = document.getElementById("goto-page");
        const page = parseInt(input.value);

        if (isNaN(page) || page < 1 || page > totalPages) {
            alert(`Введите номер страницы от 1 до ${totalPages}`);
            return;
        }

        fetchSolutions(page);
    }


    function renderPagination(totalPages, currentPage) {
        const pagination = document.getElementById("pagination");
        pagination.innerHTML = "";

        // Кнопка "Назад"
        if (currentPage > 1) {
            const prevLi = document.createElement("li");
            prevLi.className = "page-item";
            prevLi.innerHTML = `<button class="page-link" onclick="fetchSolutions(${currentPage - 1})">Назад</button>`;
            pagination.appendChild(prevLi);
        }

        const pages = [];

        if (totalPages <= 7) {
            for (let i = 1; i <= totalPages; i++) {
                pages.push(i);
            }
        } else {
            pages.push(1);

            if (currentPage > 3) pages.push("...");

            for (let i = currentPage - 2; i <= currentPage + 2; i++) {
                if (i > 1 && i < totalPages) {
                    pages.push(i);
                }
            }

            if (currentPage < totalPages - 2) pages.push("...");

            pages.push(totalPages);
        }

        pages.forEach(p => {
            const li = document.createElement("li");

            if (p === "...") {
                li.className = "page-item disabled";
                li.innerHTML = `<span class="page-link">...</span>`;
            } else {
                li.className = `page-item ${p === currentPage ? "active" : ""}`;
                li.innerHTML = `<button class="page-link" onclick="fetchSolutions(${p})">${p}</button>`;
            }

            pagination.appendChild(li);
        });

        // Кнопка "Вперёд"
        if (currentPage < totalPages) {
            const nextLi = document.createElement("li");
            nextLi.className = "page-item";
            nextLi.innerHTML = `<button class="page-link" onclick="fetchSolutions(${currentPage + 1})">Вперёд</button>`;
            pagination.appendChild(nextLi);
        }
    }


    async function fetchSolutions(page = 1) {
        currentPage = page;

        const res = await fetch(`/api/solution/paged?page=${page}&pageSize=${pageSize}&sortColumn=${currentSortColumn}&sortDirection=${currentSortDirection}`);
        const data = await res.json();
        const tbody = document.getElementById("solution-table-body");
        tbody.innerHTML = "";
        totalPages = data.totalPages;

        data.items.forEach(s => {
            const method = s.method ? `(${s.substance.method})` : "";
            const tr = document.createElement("tr");
            tr.innerHTML = 
                `<td class="italic-cell">${s.preparationDate}</td>
                <td class="italic-cell">${s.validationDate}</td>
                <td class="italic-cell">${s.solutionVolume}</td>
                <td class="italic-cell">${s.storageConditions}</td>
                <td class="italic-cell">${s.storagePeriod}</td>
                <td class="italic-cell">${s.solutionTemperature}</td>
                <td>${s.substance.formula}${method}, M=${s.substance.molarMass} г/моль/дм3, C=${s.substance.concentration} моль/дм3</td>
                <td class="wrap-column">${s.substanceMasses.map((m, i) => `${i + 1}) ${m}`).join("<br>")}</td>
                <td class="wrap-column">${s.solutionVolumes.map((v, i) => `${i + 1}) ${v}`).join("<br>")}</td>
                <td>${Array.isArray(s.correctionFactors) ? s.correctionFactors.map(k => parseFloat(k.toFixed(5))).join(", ") : "-"}</td>
                <td>${s.avgCorrectionFactor != null ? parseFloat(s.avgCorrectionFactor.toFixed(5)) : "-"}</td>
                <td>${s.fio}</td>`;

            if (!isGuest) {
                const deleteCell = document.createElement("td");
                deleteCell.innerHTML = `<button class="btn btn-sm btn-danger" onclick="deleteSolution(${s.id})">Удалить</button>`;
                tr.appendChild(deleteCell);
            }

            tbody.appendChild(tr);
        });

        renderPagination(data.totalPages, data.currentPage);
        document.getElementById("goto-page").value = "";

    }

    fetchSolutions()
</script>

<script>
    document.getElementById("solution-form").addEventListener("submit", async function (e) {
        e.preventDefault();

        const form = e.target;
        const formData = new FormData(form);
        const id = parseInt(formData.get("SelectedSubstanceId"));
        const res = await fetch(`/api/substance/${id}`);
        const data = await res.json();
        const transformedRes = {
            Id: data.id,
            Formula: data.formula,
            Method: data.method,
            MolarMass: data.molarMass,
            Concentration: data.concentration
        };
        const dto = {
            preparationDate: formData.get("PreparationDate"),
            validationDate: formData.get("ValidationDate"),
            solutionVolume: parseFloat(formData.get("SolutionVolume")),
            storageConditions: formData.get("StorageConditions"),
            storagePeriod: formData.get("StoragePeriod"),
            solutionTemperature: formData.get("SolutionTemperature"),
            substance: transformedRes,
            substanceMasses: formData.get("SubstanceMasses").split(",").map(x => parseFloat(x.trim())),
            solutionVolumes: formData.get("SolutionVolumes").split(",").map(x => parseFloat(x.trim()))
        };

        try {
            const res = await fetch("/api/solution", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${localStorage.getItem("jwtToken")}`
                },
                body: JSON.stringify(dto)
            });

            if (!res.ok) {
                const errorText = await res.text();
                alert("Ошибка при добавлении: " + errorText);
                return;
            }

            form.reset();
            fetchSolutions(currentPage);
        } catch (err) {
            console.error("Ошибка при отправке:", err);
            alert("Произошла ошибка при отправке формы.");
        }
    });

    async function deleteSolution(id) {
        if (!confirm("Вы уверены, что хотите удалить этот раствор?")) return;

        try {
            const res = await fetch(`/api/solution/${id}`, {
                method: "DELETE",
                headers: {
                    "Authorization": `Bearer ${localStorage.getItem("jwtToken")}`
                }
            });

            if (!res.ok) {
                const errorText = await res.text();
                alert("Ошибка при удалении: " + errorText);
                return;
            }

            fetchSolutions(currentPage); // Обновляем таблицу
        } catch (err) {
            console.error("Ошибка при удалении:", err);
            alert("Произошла ошибка при удалении.");
        }
    }
</script>

<script>
    async function fetchSubstances() {
        const res = await fetch("/api/substance");
        const data = await res.json();

        const dropdown = document.getElementById("substance-dropdown");
        dropdown.innerHTML = `<option value="">Выберите вещество...</option>`;
        data.forEach(sub => {
            const method = sub.method ? `(${sub.method})` : "";
            dropdown.innerHTML += `<option value="${sub.id}">${sub.formula}${method}, M=${sub.molarMass} г/моль/дм3, C=${sub.concentration} моль/дм3</option>`;
        });

        const tbody = document.getElementById("substance-table-body");
        tbody.innerHTML = "";
        data.forEach(sub => {
            const tr = document.createElement("tr");
            tr.innerHTML = `<td>${sub.formula}</td><td>${sub.method || "-"}</td><td>${sub.molarMass}</td><td>${sub.concentration}</td>`;
            if (!isGuest) {
                const deleteCell = document.createElement("td");
                deleteCell.innerHTML = `<button class="btn btn-sm btn-danger" onclick="deleteSubstance(${sub.id})">Удалить</button>`;
                tr.appendChild(deleteCell);
            }
            tbody.appendChild(tr);
        });
    }


    async function deleteSubstance(id) {
        if (!confirm("Вы уверены, что хотите удалить вещество?")) return;

        try {
            const res = await fetch(`/api/substance/${id}`, {
                method: "DELETE",
                headers: {
                    "Authorization": `Bearer ${localStorage.getItem("jwtToken")}`
                }
            });

            if (res.ok) {
                fetchSubstances();
            } else {
                const message = await res.text();
                if (res.status === 409) {
                    alert("Это вещество использовалось для контроля");
                } else {
                    alert("Ошибка при удалении: " + message);
                }
            }
        } catch (err) {
            console.error(err);
            alert("Ошибка при удалении вещества.");
        }
    }

    fetchSubstances();

    document.getElementById("substance-form").addEventListener("submit", async function (e) {
        e.preventDefault();

        const form = e.target;
        const formData = new FormData(form);

        const dto = {
            Formula: formData.get("Formula"),
            Method: formData.get("Method") || null,
            MolarMass: parseFloat(formData.get("MolarMass")),
            Concentration: parseFloat(formData.get("Concentration"))
        };

        const res = await fetch("/api/substance", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${localStorage.getItem("jwtToken")}`
            },
            body: JSON.stringify(dto)
        });

        if (res.ok) {
            form.reset();
            fetchSubstances();
        } else {
            const errorText = await res.text();
            alert("Ошибка при добавлении вещества: " + errorText);
        }
    });

</script>


<script src="/js/print.js"></script>
