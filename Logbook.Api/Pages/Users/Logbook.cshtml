@page "/Logbook"
@{
    ViewData["Title"] = "Журнал растворов";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />

<style>
    body {
        color: #333;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .container-box {
        background-color: #ffffff;
        color: #333;
        border-radius: 12px;
        padding: 2rem;
        box-shadow: 0 8px 30px rgba(0, 0, 0, 0.3);
        margin-top: 3rem;
    }

    .btn-primary {
        background-color: #5a67d8;
        border-color: #5a67d8;
    }

        .btn-primary:hover {
            background-color: #434190;
            border-color: #434190;
        }

    .btn-danger {
        background-color: #e74c3c;
    }

    .logout-button {
        position: fixed;
        top: 1rem;
        right: 2rem;
    }

    table th, table td {
        vertical-align: middle;
        font-size: 0.9rem;
    }

    .table-container {
        width: 100%;
        overflow-x: auto;
    }

    .form-container {
        margin-bottom: 3rem;
    }

    .logout-button {
        position: fixed;
        top: 1rem;
        right: 1rem;
        z-index: 1000;
    }

    .btn-outline-dark {
        background-color: ghostwhite;
        border-color: #5a67d8;
        color: #5a67d8;
    }

    .btn-outline-dark:hover {
        background-color: #5a67d8;
        color: white;
        border-color: #434190;
    }
</style>


<div id="auth-button" class="logout-button"></div>


<script>
    async function logout() {
        const token = localStorage.getItem("jwtToken");

        if (token) {
            await fetch("/api/auth/logout", {
                method: "POST",
                headers: {
                    "Authorization": `Bearer ${token}`
                }
            });
        }

        localStorage.removeItem("jwtToken");
        window.location.href = "/Login";
    }
</script>

<div class="container container-box form-container">
    <h2 class="text-center mb-4">Журнал титрованных растворов</h2>
    <div id="form-container">
    <h4 class="mt-4">Добавить новый раствор</h4>
        <form id="solution-form">
            <div class="row mb-2">
                <div class="col"><input name="PreparationDate" class="form-control" type="date" required></div>
                <div class="col"><input name="ValidationDate" class="form-control" type="date" required></div>
                <div class="col"><input name="SolutionVolume" class="form-control" type="number" step="0.01" placeholder="Объем" required></div>
                <div class="col"><input name="StorageConditions" class="form-control" placeholder="Условия хранения" required></div>
                <div class="col"><input name="StoragePeriod" class="form-control" placeholder="Срок хранения" required></div>
            </div>
            <div class="row mb-2">
                <div class="col"><input name="SolutionTemperature" class="form-control" step="0.1" placeholder="Темп." required></div>
                <div class="col"><input name="Substance" class="form-control" placeholder="Вещество" required></div>
                <div class="col"><input name="SubstanceMolarMass" class="form-control" type="number" step="0.01" placeholder="Мол. масса" required></div>
                <div class="col"><input name="SubstanceConcentration" class="form-control" type="number" step="0.01" placeholder="Концентрация" required></div>
            </div>
            <div class="mb-2">
                <input name="SubstanceMasses" class="form-control mb-2" placeholder="Массы (через запятую)" required>
                <input name="SubstanceVolumes" class="form-control" placeholder="Объемы (через запятую)" required>
            </div>
            <button type="submit" class="btn btn-primary">Добавить</button>
        </form>
    </div>
</div>

<div class="container table-container">
    <table class="table table-bordered table-striped">
        <thead class="table-light">
            <tr>
                <th>ID</th>
                <th>Дата приготовления титрованного раствора</th>
                <th>Дата проверки коэффициента поправки титрованного раствора</th>
                <th>Объем приготовленного раствора, см3</th>
                <th>Условия хранения титрованного раствора</th>
                <th>Срок хранения титрованного раствора</th>
                <th>Температура в момент измерения</th>
                <th>Установочное вещество</th>
                <th>Молярная масса, г/моль/дм3</th>
                <th>Концентрация C, моль/дм3</th>
                <th>Навеска, m, г</th>
                <th>Объем, V, см3</th>
                <th>Коэффициент поправки, К</th>
                <th>Коэффициент поправки, Кср</th>
                <th>ФИО</th>
                <th id="delete-column">Удалить</th>
            </tr>
        </thead>
        <tbody id="solution-table-body">
            <!-- JS заполняет -->
        </tbody>
    </table>
</div>
<nav class="d-flex justify-content-center align-items-center mt-3">
    <ul id="pagination" class="pagination mb-0"></ul>
    <div class="ms-3 d-flex align-items-center">
        <input id="goto-page" type="number" class="form-control" placeholder="Стр." style="width: 80px;">
        <button class="btn btn-primary ms-2" onclick="goToPage()">Перейти</button>
    </div>
</nav>


<script>
    const isGuest = new URLSearchParams(window.location.search).get("guest") === "true";
    const token = localStorage.getItem("jwtToken");
    console.log(isGuest);
    console.log(token);
    console.log(!token && !isGuest);
    if (!token && !isGuest) {
        window.location.href = "/Login";
    }
    let currentPage = 1;
    let totalPages = 1;
    const pageSize = 10;
    const authBtnContainer = document.getElementById("auth-button");
    authBtnContainer.innerHTML = isGuest
        ? `<button class="btn btn-outline-dark" onclick="window.location.href='/Login'">Войти</button>`
        : `<button class="btn btn-outline-dark" onclick="logout()">Выйти</button>`;
    if (isGuest) {
        document.getElementById("form-container").style.display = "none";
        document.getElementById("delete-column")?.remove();
    }

    function goToPage() {
        const input = document.getElementById("goto-page");
        const page = parseInt(input.value);

        if (isNaN(page) || page < 1 || page > totalPages) {
            alert(`Введите номер страницы от 1 до ${totalPages}`);
            return;
        }

        fetchSolutions(page);
    }


    function renderPagination(totalPages, currentPage) {
        const pagination = document.getElementById("pagination");
        pagination.innerHTML = "";

        // Кнопка "Назад"
        if (currentPage > 1) {
            const prevLi = document.createElement("li");
            prevLi.className = "page-item";
            prevLi.innerHTML = `<button class="page-link" onclick="fetchSolutions(${currentPage - 1})">Назад</button>`;
            pagination.appendChild(prevLi);
        }

        const pages = [];

        if (totalPages <= 7) {
            for (let i = 1; i <= totalPages; i++) {
                pages.push(i);
            }
        } else {
            pages.push(1);

            if (currentPage > 3) pages.push("...");

            for (let i = currentPage - 2; i <= currentPage + 2; i++) {
                if (i > 1 && i < totalPages) {
                    pages.push(i);
                }
            }

            if (currentPage < totalPages - 2) pages.push("...");

            pages.push(totalPages);
        }

        pages.forEach(p => {
            const li = document.createElement("li");

            if (p === "...") {
                li.className = "page-item disabled";
                li.innerHTML = `<span class="page-link">...</span>`;
            } else {
                li.className = `page-item ${p === currentPage ? "active" : ""}`;
                li.innerHTML = `<button class="page-link" onclick="fetchSolutions(${p})">${p}</button>`;
            }

            pagination.appendChild(li);
        });

        // Кнопка "Вперёд"
        if (currentPage < totalPages) {
            const nextLi = document.createElement("li");
            nextLi.className = "page-item";
            nextLi.innerHTML = `<button class="page-link" onclick="fetchSolutions(${currentPage + 1})">Вперёд</button>`;
            pagination.appendChild(nextLi);
        }
    }


    async function fetchSolutions(page = 1) {
        currentPage = page;

        const res = await fetch(`/api/solution/paged?page=${page}&pageSize=${pageSize}`);
        const data = await res.json();
        const tbody = document.getElementById("solution-table-body");
        tbody.innerHTML = "";
        totalPages = data.totalPages;

        data.items.forEach(s => {
            const tr = document.createElement("tr");
            tr.innerHTML = 
                `<td>${s.id}</td>
                <td>${s.preparationDate}</td>
                <td>${s.validationDate}</td>
                <td>${s.solutionVolume}</td>
                <td>${s.storageConditions}</td>
                <td>${s.storagePeriod}</td>
                <td>${s.solutionTemperature}</td>
                <td>${s.substance}</td>
                <td>${s.substanceMolarMass}</td>
                <td>${s.substanceConcentration}</td>
                <td>${s.substanceMasses.join(", ")}</td>
                <td>${s.substanceVolumes.join(", ")}</td>
                <td>${Array.isArray(s.correctionFactors) ? s.correctionFactors.map(k => parseFloat(k.toFixed(5))).join(", ") : "-"}</td>
                <td>${s.avgCorrectionFactor != null ? parseFloat(s.avgCorrectionFactor.toFixed(5)) : "-"}</td>
                <td>${s.login}</td>`;

            if (!isGuest) {
                const deleteCell = document.createElement("td");
                deleteCell.innerHTML = `<button class="btn btn-sm btn-danger" onclick="deleteSolution(${s.id})">Удалить</button>`;
                tr.appendChild(deleteCell);
            }

            tbody.appendChild(tr);
        });

        renderPagination(data.totalPages, data.currentPage);
        document.getElementById("goto-page").value = "";

    }

    fetchSolutions()
</script>
<script>
    document.getElementById("solution-form").addEventListener("submit", async function (e) {
        e.preventDefault();

        const form = e.target;
        const formData = new FormData(form);

        const dto = {
            preparationDate: formData.get("PreparationDate"),
            validationDate: formData.get("ValidationDate"),
            solutionVolume: parseFloat(formData.get("SolutionVolume")),
            storageConditions: formData.get("StorageConditions"),
            storagePeriod: formData.get("StoragePeriod"),
            solutionTemperature: formData.get("SolutionTemperature"),
            substance: formData.get("Substance"),
            substanceMolarMass: parseFloat(formData.get("SubstanceMolarMass")),
            substanceConcentration: parseFloat(formData.get("SubstanceConcentration")),
            substanceMasses: formData.get("SubstanceMasses").split(",").map(x => parseFloat(x.trim())),
            substanceVolumes: formData.get("SubstanceVolumes").split(",").map(x => parseFloat(x.trim()))
        };

        try {
            const res = await fetch("/api/solution", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${localStorage.getItem("jwtToken")}`
                },
                body: JSON.stringify(dto)
            });

            if (!res.ok) {
                const errorText = await res.text();
                alert("Ошибка при добавлении: " + errorText);
                return;
            }

            form.reset();
            fetchSolutions(currentPage); // обновить таблицу
        } catch (err) {
            console.error("Ошибка при отправке:", err);
            alert("Произошла ошибка при отправке формы.");
        }
    });
</script>
